services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydb
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"


  backend:
    build: ./backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=mypassword
      - DB_NAME=mydb
      - KAFKA_BROKER=kafka:9092
      - REDIS_ADDR=redis:6379
      - PORT=8080
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "sleep 2 || exit 1"]
      interval: 10s
      retries: 3


  pinger:
    container_name: pinger
    build: 
      context: ./pinger
      dockerfile: Dockerfile
    depends_on:
      - kafka
    environment:
      DOCKER_API_VERSION: "1.47"
      KAFKA_BROKER: kafka:9092
      PING_INTERVAL: 10s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    privileged: true
      
  frontend:
    build: ./frontend
    depends_on:
      backend:
        condition: service_started
      pinger:
        condition: service_started
    environment:
      - VITE_API_BASE_URL=http://localhost:8080
    ports:
      - "3000:3000"
      
  nginx:
    image: nginx:stable-alpine
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
        
volumes:
  pgdata: